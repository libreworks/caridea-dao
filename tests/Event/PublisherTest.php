<?php
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015-2018 LibreWorks contributors
 * @license   Apache-2.0
 */
namespace Caridea\Dao\Event;

/**
 * Generated by hand
 */
class PublishingTest extends \PHPUnit\Framework\TestCase
{
    use Publishing;

    /**
     * @covers \Caridea\Dao\Event\Publishing::preDelete
     */
    public function testPreDelete()
    {
        $entity = new \stdClass();
        $this->publisher = $this->createMock(\Caridea\Event\Publisher::class);
        $this->publisher->method('publish')->willReturnCallback(function ($e) {
            $this->assertInstanceOf(PreDelete::class, $e);
        });
        $this->preDelete($entity);
        $this->verifyMockObjects();
    }

    /**
     * @covers \Caridea\Dao\Event\Publishing::postDelete
     */
    public function testPostDelete()
    {
        $entity = new \stdClass();
        $this->publisher = $this->createMock(\Caridea\Event\Publisher::class);
        $this->publisher->method('publish')->willReturnCallback(function ($e) {
            $this->assertInstanceOf(PostDelete::class, $e);
        });
        $this->postDelete($entity);
        $this->verifyMockObjects();
    }

    /**
     * @covers \Caridea\Dao\Event\Publishing::preInsert
     */
    public function testPreInsert()
    {
        $entity = new \stdClass();
        $this->publisher = $this->createMock(\Caridea\Event\Publisher::class);
        $this->publisher->method('publish')->willReturnCallback(function ($e) {
            $this->assertInstanceOf(PreInsert::class, $e);
        });
        $this->preInsert($entity);
        $this->verifyMockObjects();
    }

    /**
     * @covers \Caridea\Dao\Event\Publishing::postInsert
     */
    public function testPostInsert()
    {
        $entity = new \stdClass();
        $this->publisher = $this->createMock(\Caridea\Event\Publisher::class);
        $this->publisher->method('publish')->willReturnCallback(function ($e) {
            $this->assertInstanceOf(PostInsert::class, $e);
        });
        $this->postInsert($entity);
        $this->verifyMockObjects();
    }

    /**
     * @covers \Caridea\Dao\Event\Publishing::preUpdate
     */
    public function testPreUpdate()
    {
        $entity = new \stdClass();
        $this->publisher = $this->createMock(\Caridea\Event\Publisher::class);
        $this->publisher->method('publish')->willReturnCallback(function ($e) {
            $this->assertInstanceOf(PreUpdate::class, $e);
        });
        $this->preUpdate($entity);
        $this->verifyMockObjects();
    }

    /**
     * @covers \Caridea\Dao\Event\Publishing::postUpdate
     */
    public function testPostUpdate()
    {
        $entity = new \stdClass();
        $this->publisher = $this->createMock(\Caridea\Event\Publisher::class);
        $this->publisher->method('publish')->willReturnCallback(function ($e) {
            $this->assertInstanceOf(PostUpdate::class, $e);
        });
        $this->postUpdate($entity);
        $this->verifyMockObjects();
    }
}
