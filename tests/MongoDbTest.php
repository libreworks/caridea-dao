<?php
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015-2018 LibreWorks contributors
 * @license   Apache-2.0
 */
namespace Caridea\Dao;

/**
 * Generated by hand
 * @requires extension mongodb
 */
class MongoDbTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @covers \Caridea\Dao\Dao::__construct
     * @covers \Caridea\Dao\MongoDb::__construct
     * @covers \Caridea\Dao\MongoDb::doExecute
     */
    public function testBasic()
    {
        $manager = new \MongoDB\Driver\Manager();
        $collection = "foo.bar";
        $object = $this->getMockBuilder(MongoDb::class)
            ->enableOriginalConstructor()
            ->setConstructorArgs([$manager, $collection])
            ->setMethods([])
            ->getMock();
        $ro = new \ReflectionObject($object);
        $rm = $ro->getMethod('doExecute');
        $rm->setAccessible(true);
        $output = $rm->invoke($object, function ($m, $c) use ($manager, $collection) {
            $this->assertSame($manager, $m);
            $this->assertSame($collection, $c);
            return "Hello";
        });
        $this->assertEquals('Hello', $output);
        $this->verifyMockObjects();
    }

    /**
     * @covers \Caridea\Dao\Dao::__construct
     * @covers \Caridea\Dao\MongoDb::__construct
     * @covers \Caridea\Dao\MongoDb::doExecute
     * @covers \Caridea\Dao\Exception\Translator\MongoDb::translate
     * @expectedException \Caridea\Dao\Exception\Generic
     * @expectedExceptionMessage Uncategorized database error
     */
    public function testException()
    {
        $manager = new \MongoDB\Driver\Manager();
        $collection = "foo.bar";
        $object = $this->getMockBuilder(MongoDb::class)
            ->enableOriginalConstructor()
            ->setConstructorArgs([$manager, $collection])
            ->setMethods([])
            ->getMock();
        $ro = new \ReflectionObject($object);
        $rm = $ro->getMethod('doExecute');
        $rm->setAccessible(true);
        $rm->invoke($object, function ($m, $c) use ($manager, $collection) {
            $this->assertSame($manager, $m);
            $this->assertSame($collection, $c);
            throw new \MongoDB\Driver\Exception\BulkWriteException();
        });
    }
}
