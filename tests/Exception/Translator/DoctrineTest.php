<?php
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015-2018 LibreWorks contributors
 * @license   Apache-2.0
 */
namespace Caridea\Dao\Exception\Translator;

/**
 * Generated by hand
 * @covers \Caridea\Dao\Exception\Translator\Doctrine::translate
 */
class DoctrineTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @covers \Caridea\Dao\Exception\Unreachable
     * @expectedException \Caridea\Dao\Exception\Unreachable
     * @expectedExceptionMessage System unreachable or connection timed out
     */
    public function testUnreachable1()
    {
        $e = new \Doctrine\DBAL\Driver\PDOException(new \PDOException());
        throw Doctrine::translate(new \Doctrine\DBAL\Exception\ConnectionException("Failed", $e));
    }

    /**
     * @covers \Caridea\Dao\Exception\Conflicting
     * @expectedException \Caridea\Dao\Exception\Conflicting
     * @expectedExceptionMessage Optimistic or pessimistic concurrency failure
     * @expectedExceptionCode 409
     */
    public function testConflicting1()
    {
        throw Doctrine::translate(new \Doctrine\ORM\PessimisticLockException("Failed", 123));
    }

    /**
     * @covers \Caridea\Dao\Exception\Unreachable
     * @expectedException \Caridea\Dao\Exception\Conflicting
     * @expectedExceptionMessage Optimistic or pessimistic concurrency failure
     * @expectedExceptionCode 409
     */
    public function testConflicting2()
    {
        throw Doctrine::translate(new \Doctrine\ORM\OptimisticLockException("Failed", 123));
    }

    /**
     * @covers \Caridea\Dao\Exception\Inoperable
     * @expectedException \Caridea\Dao\Exception\Inoperable
     * @expectedExceptionMessage Invalid API usage
     * @expectedExceptionCode 0
     */
    public function testInoperable1()
    {
        throw Doctrine::translate(new \Doctrine\ORM\Query\QueryException("Failed", 345));
    }

    /**
     * @covers \Caridea\Dao\Exception\Inoperable
     * @expectedException \Caridea\Dao\Exception\Inoperable
     * @expectedExceptionMessage Invalid API usage
     * @expectedExceptionCode 0
     */
    public function testInoperable2()
    {
        throw Doctrine::translate(new \Doctrine\ORM\Mapping\MappingException("Failed", 345));
    }

    /**
     * @covers \Caridea\Dao\Exception\Inoperable
     * @expectedException \Caridea\Dao\Exception\Inoperable
     * @expectedExceptionMessage Invalid API usage
     * @expectedExceptionCode 0
     */
    public function testInoperable3()
    {
        throw Doctrine::translate(new \Doctrine\Common\Persistence\Mapping\MappingException("Failed", 345));
    }

    /**
     * @covers \Caridea\Dao\Exception\Unretrievable
     * @expectedException \Caridea\Dao\Exception\Unretrievable
     * @expectedExceptionMessage Data could not be retrieved
     * @expectedExceptionCode 404
     */
    public function testUnretrievable1()
    {
        throw Doctrine::translate(new \Doctrine\ORM\EntityNotFoundException("Failed", 456));
    }

    /**
     * @covers \Caridea\Dao\Exception\Unretrievable
     * @expectedException \Caridea\Dao\Exception\Unretrievable
     * @expectedExceptionMessage Data could not be retrieved
     * @expectedExceptionCode 404
     */
    public function testUnretrievable2()
    {
        throw Doctrine::translate(new \Doctrine\ORM\UnexpectedResultException("Failed", 456));
    }

    /**
     * @covers \Caridea\Dao\Exception\Duplicative
     * @expectedException \Caridea\Dao\Exception\Duplicative
     * @expectedExceptionMessage Unique constraint violation
     * @expectedExceptionCode 409
     */
    public function testDuplicative1()
    {
        $e = new \Doctrine\DBAL\Driver\PDOException(new \PDOException());
        throw Doctrine::translate(new \Doctrine\DBAL\Exception\UniqueConstraintViolationException("Failed", $e));
    }

    /**
     * @covers \Caridea\Dao\Exception\Violating
     * @expectedException \Caridea\Dao\Exception\Violating
     * @expectedExceptionMessage Constraint violation
     * @expectedExceptionCode 422
     */
    public function testViolating()
    {
        $e = new \Doctrine\DBAL\Driver\PDOException(new \PDOException());
        throw Doctrine::translate(new \Doctrine\DBAL\Exception\ConstraintViolationException("Document failed validation", $e));
    }

    /**
     * @covers \Caridea\Dao\Exception\Generic
     * @expectedException \Caridea\Dao\Exception\Generic
     * @expectedExceptionMessage Uncategorized database error
     * @expectedExceptionCode 0
     */
    public function testGeneric()
    {
        $e = new \Doctrine\DBAL\Driver\PDOException(new \PDOException());
        throw Doctrine::translate(new \Doctrine\DBAL\Exception\DriverException("No idea dude", $e));
    }
}
